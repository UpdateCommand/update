#!/bin/sh
set -euf

# Brew for macOS
#
# Update Homebrew package manager for Apple macOS.
#
# This update process has extra handling that in practice
# tends to fix trouble before it gets too far out of hand.
#
# Our general approach is to first try to update via item-by-item,
# then second to try to update via the typical Homebrew command.
#
#
# ## Troubleshooting unreadable
#
# If you get an error like this:
#
#     Error: Cask 'foo' is unreadable â€¦
#
# Then try deleting the cask like this:
#
#     $ rm /usr/local/Caskroom/foo
#
#
# ## Troubleshooting ownership
#
# Caution: major macOS upgrades result in /usr/local ownership reverted
# to root:wheel. We have improved the situation already, but there's one
# migration you need to do which requires writing permission of /usr/local.
#
#     sudo chown "$(whoami)" /usr/local
#     cd /usr/local
#     git fetch
#     git reset --hard origin/master
#     brew update --force
#
if [ "$(id -u)" -ne 0 ]; then
    if command -v brew >/dev/null 2>&1; then
        # Brew strongly prefers to run as the current user.
        # Otherwise, brew tends to carp due to ownership issues.
        this_uid="$(id -u "$(whoami)")"
        brew_uid="$(stat -f %u "$(brew --cellar)")"
        if [ "$this_uid" -eq "$brew_uid" ]; then
        
            arg_verbose=""; if [ -n "${VERBOSE+1}" ] && [ "$VERBOSE" = true ]; then arg_verbose="--verbose"; fi
            arg_debug=""; if [ -n "${DEBUG+1}" ] && [ "$DEBUG" = true ]; then arg_debug="--debug"; fi

            # Upgrade
            brew upgrade $arg_verbose $arg_debug
            brew upgrade $arg_verbose $arg_debug --greedy
            brew upgrade $arg_verbose $arg_debug --cask
            brew upgrade $arg_verbose $arg_debug --cask --greedy

            # Cleanup to make space and mitigate stale formulas
            brew cleanup $arg_verbose $arg_debug

            # Update the brew taps one by one via git
            for tap in $(brew tap); do
                repo=$(brew --repo "$tap")
                cd "$repo"
                git clean -dfx
                origin=$(git remote -v | grep -m1 '(fetch)' | awk '{print $1}')
                branch=$(git branch --show-current)
                git reset --hard "$origin/$branch"
                git pull "$origin" "$branch"
            done

            # Update the brew knowledgebase via the typical command.
            brew update $arg_verbose $arg_debug

            # As of 2019-04-10, these loops below are the best known simple
            # way to figure out which items are still outdated, then upgrade
            # each one, one by one, and continuing even if any item fails.

            brew outdated | 
            while read -r x; do
                brew reinstall $arg_verbose $arg_debug --force "$x" || true
            done

            brew outdated --cask | 
            while read -r x; do
                brew reinstall $arg_verbose $arg_debug --force "$x" || true
            done

            brew outdated --cask --greedy --verbose |
            grep -v '(latest)' |
            awk '{print $1}' |
            while read -r x; do
                brew reinstall $arg_verbose $arg_debug --force "$x" || true
            done

            # Cleanup to make space and mitigate stale formulas
            brew cleanup $arg_verbose $arg_debug

        fi
    fi
fi
