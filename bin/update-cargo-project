#!/bin/sh
set -euf

# Update a cargo project.
#
# Syntax:
#
#     update-cargo-project
#
# Example:
#
#     $ cd ~/my-rust-project
#     $ update-cargo-project
#
# The script does various updates and upgrades.
# The capabilties depend on what you have installed.
# The goal is to have the project fully built and testable.
#
# Example code to find each cargo project and update it:
#
#     find "$HOME" -type f -name 'Cargo.toml' -exec dirname {} \; | 
#     while read -r x; do 
#         cd "$x" &&
#         update-cargo-project || 
#         true
#     done
#
# Feedback appreciated.

update_cargo_project() {
    # Rust cargo package manager
    if command -v cargo >/dev/null 2>&1; then
        # Is this command running inside a cargo project?
        if [ -e Cargo.toml ]; then 
            update_cargo_project_with_targets
            update_cargo_project_with_upgrade
            update_cargo_project_with_sweep
            update_cargo_project_with_udeps
        fi
    fi
}

# Run cargo update & cargo check & cargo build & cargo test.
# This function is best effort to make everything current.
update_cargo_project_with_targets() {
    # Update dependencies as recorded in the local lock file.
    # Force updating all dependencies of [SPEC]... as well.
    cargo update --recursive
    # Check the current package and all of its dependencies for errors.
    cargo check --all-targets
    # Compile the current package and all of its dependencies.
    cargo build --all-targets
    # Compile unit tests, integration test, and documentation tests.
    cargo test --all-targets --no-run
}

# Is "cargo upgrade" available? If yes, then upgrade the Cargo.toml file.
#
# If you have cargo-edit installed, then you can run cargo upgrade (without s)
# to automatically bump all dependencies to their latest versions.
#
# If you want to add "cargo upgrade":
#
#     cargo add cargo-upgrades
#     cargo add cargo-edit
#
update_cargo_project_with_upgrade() {
    if cargo upgrade --help>/dev/null 2>&1; then
        cargo upgrade --recursive true
    fi
}

# Is "cargo sweep" available?
# If yes, then delete old build artifacts.
update_cargo_project_with_sweep() {
    if cargo --list | grep -q '^ *sweep$'; then 
        # Delete build artifacts that weren't built 
        # with any of the currently installed toolchains.
        cargo sweep --recursive
        # Rebuild all dependencies that are older than 90 days.
        # As of 2024-02-17 this is the least-worst way we know
        # to delete old dependencies that are no longer used.
        # Replace this code when there's any better solution,
        # such as a cargo command that can delete unreachables.
        # We choose 90 days because it's a reasonably long time.
        cargo sweep --recursive --time 90
        # Use a cargo sweep timestamp file to keep 
        # just the most-recent build artifacts.
        cargo sweep --recursive --stamp
        cargo build --all-targets
        cargo test --all-targets --no-run
        cargo sweep --recursive --file
    fi
}

# Is "cargo-udeps" available to run?
# If yes, then alert about unused dependencies.
# As of 2024-02-17 cargo-udeps requires nightly to run.
update_cargo_project_with_udeps() {
    if cargo --list | grep -q '^ *cargo-udeps$'; then 
        if rustup toolchain list | grep -q '^nightly-'; then
            cargo +nightly udeps
        fi
    fi
}

update_cargo_project
